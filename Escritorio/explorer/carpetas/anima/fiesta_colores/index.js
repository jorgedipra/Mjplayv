// Generated by CoffeeScript 1.3.3
(function() {
  var UpdateMousePosition, context;

  window.mouse = {
    posx: 0,
    posy: 0
  };

  /*
    ---------------------DebugDraw コンソールに書き出す---------------------
    @param 文字列
    @return なし
  */


  window.DebugDraw = function(string) {
    return console.log(string);
  };

  /*
    ---------------------マウス位置の更新---------------------
    @param マウス移動イベント
    @return なし
  */


  UpdateMousePosition = function(e) {
    mouse.posx = e.clientX;
    return mouse.posy = e.clientY;
  };

  /*
    ---------------------マウス移動時のイベント---------------------
    @return なし
  */


  window.addEventListener('mousemove', function(e) {
    UpdateMousePosition(e);
    return $("#MousePos").html("x:" + mouse.posx + " y:" + mouse.posy);
  }, false);

  $(function() {
    return InsertStrDebugInfo("MousePos</td><td id = 'MousePos'>0");
  });

  /*
    ---------------------ブラウザの幅を取得  ---------------------
    @return ブラウザの幅。ただし、少し大きい。
            ので、修正された幅をほしい場合はGetFixBroeserWidth
  */


  window.GetBroeserWidth = function() {
    if (window.innerWidth) {
      return window.innerWidth;
    }
    if (document.documentElement && document.documentElement.clientWidth !== 0) {
      return document.documentElement.clientWidth;
    }
    if (document.body) {
      return document.body.clientWidth;
    }
    return 0;
  };

  window.GetFixBroeserWidth = function() {
    return GetBroeserWidth() - 20;
  };

  /*
    ---------------------ブラウザの高さを取得  ---------------------
    @return ブラウザの幅。ただし、少し大きい。
            ので、修正された幅をほしい場合はGetFixBroeserHeight
  */


  window.GetBroeserHeight = function() {
    if (window.innerHeight) {
      return window.innerHeight;
    }
    if (document.documentElement && document.documentElement.clientHeight !== 0) {
      return document.documentElement.clientHeight;
    }
    if (document.body) {
      return document.body.clientHeight;
    }
    return 0;
  };

  window.GetFixBroeserHeight = function() {
    return GetBroeserHeight() - 20;
  };

  /*
    ---------------------デフォルトコンテキストの登録  ---------------------
  */


  context = null;

  window.SetContext = function(ctx) {
    return context = ctx;
  };

  /*
    ---------------------DebugWindowに文字を挿入  ---------------------
  */


  window.InsertStrDebugInfo = function(str) {
    return $("#DebugInfo table").append("<tr><td>" + str + "</td></tr>");
  };

  /*
    ---------------------円の描画---------------------
    @param x,y描画の中心位置
    @param arc_r　半径
    @pram rgb　色
  */


  window.DrawArc = function(x, y, arc_r, r, g, b, alpha, ctx) {
    if (alpha === void 0) {
      alpha = 1.0;
    }
    if ((ctx != null) === false) {
      ctx = context;
    }
    ctx.beginPath();
    ctx.arc(x, y, arc_r, 0, Math.PI * 2, false);
    ctx.fillStyle = "rgba( " + r + " , " + g + " , " + b + " , " + alpha + " )";
    return ctx.fill();
  };

  window.DrawGradientArc = function(x, y, radius, r, g, b) {
    var ctx, gradient;
    if ((typeof ctx !== "undefined" && ctx !== null) === false) {
      ctx = context;
    }
    ctx.beginPath();
    gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);
    gradient.addColorStop(0, "rgba(" + r + "," + g + "," + b + ",1.0)");
    gradient.addColorStop(0.5, "rgba(" + r + "," + g + "," + b + ",1.0)");
    gradient.addColorStop(0.7, "rgba(" + r + "," + g + "," + b + ",0.5)");
    gradient.addColorStop(0.9, "rgba(" + r + "," + g + "," + b + ",0.1)");
    gradient.addColorStop(1.0, "rgba(" + r + "," + g + "," + b + ",0)");
    ctx.fillStyle = gradient;
    ctx.arc(x, y, radius, 0, Math.PI * 2, false);
    return ctx.fill();
  };

  /*
    ---------------------コンソールに描画---------------------
    @param 文字列
    @return なし
  */


  window.DebugDraw = function(str) {
    return console.log(str);
  };

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var InsertDebugDraw, LoopMain, LoopManager, Picker, PickerManager, SetCanvasSize, UpdateDebugDraw, canvas, context, kPickerMaxR, kPickerMinR, picker_manager;

  canvas = document.getElementById("world");

  /*
    ---------------------キャンバスサイズのセット---------------------
  */


  SetCanvasSize = function() {
    canvas.width = GetFixBroeserWidth();
    return canvas.height = GetFixBroeserHeight();
  };

  context = canvas.getContext("2d");

  /*
    ---------------------Picker---------------------
    たまのことをPickerということにしました
  */


  kPickerMinR = 2;

  kPickerMaxR = 10 + kPickerMinR;

  Picker = (function() {

    function Picker(x, y, id) {
      this.x = x;
      this.y = y;
      this.id = id;
      this.r = Math.floor(Math.random() * 255);
      this.g = Math.floor(Math.random() * 255);
      this.b = Math.floor(Math.random() * 255);
      this.radius = Math.floor(Math.random() * (kPickerMaxR - kPickerMinR)) + kPickerMinR;
      this.changepattern = 0;
      this.kMaxPattern = 6;
      this.velo = {
        x: 0,
        y: 0
      };
      this.mouseinwindow = true;
    }

    /*
        ------- 更新-------
    */


    Picker.prototype.Update = function() {
      this.ChangeColor();
      this.Draw();
      return this.Move();
    };

    /*
        ------- 更新-------
    */


    Picker.prototype.Move = function() {
      var rate, target;
      rate = 0.002 * (this.id % 10 + 5);
      target = {
        x: this.mouseinwindow ? mouse.posx : canvas.width / 2,
        y: this.mouseinwindow ? mouse.posy : canvas.height / 2
      };
      this.velo.x += (target.x - this.x - this.radius + kPickerMaxR / 2) * rate;
      this.velo.y += (target.y - this.y - this.radius + kPickerMaxR / 2) * rate;
      this.x += this.velo.x;
      this.y += this.velo.y;
      this.velo.x *= 0.95;
      return this.velo.y *= 0.95;
    };

    /*
        ------- 花火-------
    */


    Picker.prototype.FireWorks = function() {
      var rate, vec;
      vec = {
        x: mouse.posx - this.x - (Math.floor(Math.random() * 40) - 20),
        y: mouse.posy - this.y - (Math.floor(Math.random() * 40) - 20)
      };
      this.veclength = Math.sqrt(vec.x * vec.x + vec.y * vec.y);
      if (this.veclength > 1000) {
        this.veclength = 1000;
      }
      rate = (1000 - this.veclength) * 0.001;
      this.velo.x -= vec.x * rate;
      return this.velo.y -= vec.y * rate;
    };

    /*
        -------定期花火-------
    */


    Picker.prototype.TimerFireWorks = function() {
      var rate, vec;
      vec = {
        x: Math.floor(Math.random() * 200) - 100,
        y: Math.floor(Math.random() * 200) - 100
      };
      this.veclength = Math.sqrt(vec.x * vec.x + vec.y * vec.y);
      rate = this.veclength * 0.01;
      this.velo.x += vec.x * rate;
      return this.velo.y += vec.y * rate;
    };

    /*
        ------- ChangeColor-------
        色を変える
    */


    Picker.prototype.ChangeColor = function() {
      var fix, rate;
      fix = 20;
      rate = 10;
      switch (this.changepattern) {
        case 0:
          this.r += rate;
          if (this.r > (255 - fix)) {
            return this.RondomChangePettern();
          }
          break;
        case 1:
          this.g += rate;
          if (this.g > (255 - fix)) {
            return this.RondomChangePettern();
          }
          break;
        case 2:
          this.b += rate;
          if (this.b > (255 - fix)) {
            return this.RondomChangePettern();
          }
          break;
        case 3:
          this.r -= rate;
          if (this.r <= fix) {
            return this.RondomChangePettern();
          }
          break;
        case 4:
          this.g -= rate;
          if (this.g <= fix) {
            return this.RondomChangePettern();
          }
          break;
        case 5:
          this.b -= rate;
          if (this.b <= fix) {
            return this.RondomChangePettern();
          }
      }
    };

    /*
         ------- RondomChangePettern-------
    */


    Picker.prototype.RondomChangePettern = function() {
      var old, _results;
      old = this.changepattern;
      _results = [];
      while (old === this.changepattern) {
        _results.push(this.changepattern = Math.floor(Math.random() * this.kMaxPattern));
      }
      return _results;
    };

    /*
        ------- 描画-------
    */


    Picker.prototype.Draw = function() {
      context.globalCompositeOperation = "lighter";
      return DrawGradientArc(this.x, this.y, this.radius, this.r, this.g, this.b);
    };

    return Picker;

  })();

  /*
    ---------------------PickerManager---------------------
  */


  picker_manager = null;

  PickerManager = (function() {

    function PickerManager() {
      var _this = this;
      this.pickers = [];
      $(window).click(function() {
        _this.CreatePicker();
        return _this.FireWorksPicker();
      });
      this.mouseinwindow = false;
      this.timer_fire_works = 0;
      $(window).mouseout(function() {
        var picker, _i, _len, _ref, _results;
        _this.mouseinwindow = false;
        _ref = _this.pickers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          picker = _ref[_i];
          _results.push(picker.mouseinwindow = false);
        }
        return _results;
      });
      $(window).mouseover(function() {
        var picker, _i, _len, _ref, _results;
        _this.mouseinwindow = true;
        _ref = _this.pickers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          picker = _ref[_i];
          _results.push(picker.mouseinwindow = true);
        }
        return _results;
      });
    }

    /*
        ------- Pickerの生成-------
    */


    PickerManager.prototype.CreatePicker = function() {
      var i, _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 5; i = ++_i) {
        _results.push(this.pickers.push(new Picker(mouse.posx, mouse.posy, this.pickers.length)));
      }
      return _results;
    };

    /*
        ------- Pickerの花火-------
    */


    PickerManager.prototype.FireWorksPicker = function() {
      var picker, _i, _len, _ref, _results;
      _ref = this.pickers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        picker = _ref[_i];
        _results.push(picker.FireWorks());
      }
      return _results;
    };

    /*
        ------- Pickerの定期花火-------
    */


    PickerManager.prototype.TimerFireWorksPicker = function() {
      var picker, _i, _len, _ref;
      if (this.mouseinwindow === false) {
        this.timer_fire_works++;
        if (this.timer_fire_works > 100) {
          _ref = this.pickers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            picker = _ref[_i];
            picker.TimerFireWorks();
          }
          return this.timer_fire_works = 0;
        }
      }
    };

    /*
        ------- 更新-------
    */


    PickerManager.prototype.Update = function() {
      var picker, _i, _len, _ref, _results;
      this.TimerFireWorksPicker();
      _ref = this.pickers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        picker = _ref[_i];
        _results.push(picker.Update());
      }
      return _results;
    };

    /*
        ------- デバッグ情報の追加-------
    */


    PickerManager.prototype.InsertDebugDraw = function() {
      return InsertStrDebugInfo("PickNum</td><td id = 'PickNum'>0");
    };

    /*
        ------- デバッグ情報の更新-------
    */


    PickerManager.prototype.UpdateDebugDraw = function() {
      return $("#PickNum").html(this.pickers.length);
    };

    return PickerManager;

  })();

  /*
    ---------------------デバッグ文字列の更新---------------------
  */


  UpdateDebugDraw = function(dtime) {
    $("#dTime").html(dtime);
    $("#CanvasSize").html("w:" + canvas.width + " h:" + canvas.height);
    return picker_manager.UpdateDebugDraw();
  };

  /*
    ---------------------デバッグ文字の挿入---------------------
  */


  InsertDebugDraw = function() {
    InsertStrDebugInfo("dTime</td><td id = 'dTime'>0");
    InsertStrDebugInfo("CanvasSize</td><td id = 'CanvasSize'>0");
    return picker_manager.InsertDebugDraw();
  };

  /*
    ---------------------リサイズ---------------------
  */


  $(window).resize(SetCanvasSize);

  $(window).bind("onMaximize", SetCanvasSize);

  /*
    ---------------------ループのメイン---------------------
  */


  LoopMain = function(dtime) {
    context.clearRect(0, 0, canvas.width, canvas.height);
    UpdateDebugDraw(dtime);
    return picker_manager.Update();
  };

  /*
    ---------------------メインのスタート部分と描画を管理---------------------
  */


  LoopManager = (function() {

    function LoopManager() {}

    /*
        -------描画関数を登録-------
        @param 描画関数
        @reutrn なし
    */


    LoopManager.prototype.Init = function(name, renderfunction) {
      this.render_function = renderfunction;
      this.date = new Date();
      this.old_time = this.date.getTime();
      this.kFPS = 30;
      return setInterval(function() {
        var newtime;
        this.date = new Date();
        newtime = this.date.getTime();
        renderfunction(newtime - this.old_time);
        return this.old_time = newtime;
      }, 1000 / this.kFPS);
    };

    return LoopManager;

  })();

  /*
    ---------------------エントリーポイント---------------------
    描画関数の登録
  */


  $(function() {
    var sd;
    sd = new LoopManager();
    sd.Init("sd", LoopMain);
    picker_manager = new PickerManager();
    SetContext(context);
    SetCanvasSize();
    return InsertDebugDraw();
  });

}).call(this);
